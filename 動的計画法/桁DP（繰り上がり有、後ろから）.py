# https://atcoder.jp/contests/abc155/tasks/abc155_e

N = list(input())[::-1]
n = len(N)

dp = [[0] * 2 for _ in range(n+1)]

# 1桁目で繰り上がりは起きないので
# 例えば1桁目が6のとき、前の桁で繰り上がりしていた場合は7になり、遷移は10-7+dp[i][1]=3になるが
# 0桁目からの繰り上がりは存在しないので10-6=4となるようにdp[0][1]を1として補正する
dp[0][1] = 1

for i in range(n):
    ni = int(N[i])
    # 繰り上がりしていたときに10になる場合
    if ni + 1 == 10:
        # dp[i][0]からi+1桁目が繰り上がらない遷移は、前の位で繰り上がりしていないので、そのままniを加算する
        # dp[i][1]からi+1桁目が繰り上がらない遷移は、前の位で繰り上がりしてi+1桁目が0になってしまったので、10枚使って支払う
        dp[i+1][0] += min(ni + dp[i][0], 10 + dp[i][1])
        # dp[i][0]からi+1桁目が繰り上がる遷移は前の位で繰り上がりしていないので、そのまま10-niを加算する
        # dp[i][1]からi+1桁目が繰り上がる遷移は前の位で繰り上がりしi+1桁目も繰り上がったため、
        # i+1桁目は0になり、支払いに必要な紙幣は0枚となる
        dp[i+1][1] += min(10 - ni + dp[i][0], dp[i][1])
    else:
        # i+1桁目が繰り上がらない遷移
        dp[i+1][0] += min(ni + dp[i][0], ni + 1 + dp[i][1])
        # i+1桁目が繰り上がる遷移
        dp[i+1][1] += min(10 - ni + dp[i][0], 10 - ni - 1 + dp[i][1])

print(min(dp[n][0], dp[n][1]+1))